

// const ParticipationType = require('../models/participationType');
// const Plan = require('../models/plan');

// // Sync all plans with updated participants and accommodations
// const syncPlans = async () => {
//   try {
//     const participationTypes = await ParticipationType.findOne();
//     if (!participationTypes) return;

//     const { participants = [], accommodations = [] } = participationTypes;

//     const plans = await Plan.find();

//     for (const plan of plans) {
//       // Sync participant prices
//       const updatedPrices = participants.map((participant) => {
//         const existingPrice = plan.prices.find(
//           (p) => p.participationType?.toString() === participant._id.toString()
//         );
//         return {
//           participationType: participant._id,
//           name: participant.name,
//           price: existingPrice ? existingPrice.price : null,
//         };
//       });

//       // Sync accommodation prices
//       const updatedAccommodationPrices = accommodations.map((accommodation) => {
//         const existingPrice = plan.accommodationPrices.find(
//           (a) => a.accommodationType?.toString() === accommodation._id.toString()
//         );
//         return {
//           accommodationType: accommodation._id,
//           name: accommodation.name,
//           price: existingPrice ? existingPrice.price : null,
//         };
//       });

//       plan.prices = updatedPrices;
//       plan.accommodationPrices = updatedAccommodationPrices;
//       plan.updatedAt = Date.now();

//       await plan.save();
//     }
//   } catch (error) {
//     console.error('Error syncing plans:', error.message);
//   }
// };

// // Add a new participant
// const addParticipant = async (req, res) => {
//   const { name } = req.body;

//   if (!name) return res.status(400).json({ message: 'Name is required' });

//   try {
//     const existingParticipant = await ParticipationType.findOne({ 'participants.name': name });
//     if (existingParticipant) {
//       return res.status(400).json({ message: 'Participant already exists' });
//     }

//     await ParticipationType.updateOne(
//       {},
//       { $push: { participants: { name } } },
//       { upsert: true }
//     );

//     await syncPlans();

//     const updatedParticipationType = await ParticipationType.findOne();
//     res.status(201).json({ participants: updatedParticipationType.participants });
//   } catch (error) {
//     console.error('Error adding participant:', error.message);
//     res.status(500).json({ message: error.message });
//   }
// };

// // Delete a participant
// const deleteParticipant = async (req, res) => {
//   const { id } = req.params;

//   if (!id) return res.status(400).json({ message: 'ID is required' });

//   try {
//     const result = await ParticipationType.updateOne(
//       {},
//       { $pull: { participants: { _id: id } } }
//     );

//     if (result.modifiedCount === 0) {
//       return res.status(404).json({ message: 'Participant not found' });
//     }

//     // Remove the participant from all plans
//     const plans = await Plan.find();
//     for (const plan of plans) {
//       plan.prices = plan.prices.filter((p) => p.participationType?.toString() !== id);
//       plan.updatedAt = Date.now();
//       await plan.save();
//     }

//     await syncPlans();

//     res.status(200).json({ message: 'Participant deleted successfully' });
//   } catch (error) {
//     console.error('Error deleting participant:', error.message);
//     res.status(500).json({ message: error.message });
//   }
// };

// // Add a new accommodation
// const addAccommodation = async (req, res) => {
//   const { name } = req.body;

//   if (!name) return res.status(400).json({ message: 'Name is required' });

//   try {
//     const existingAccommodation = await ParticipationType.findOne({ 'accommodations.name': name });
//     if (existingAccommodation) {
//       return res.status(400).json({ message: 'Accommodation already exists' });
//     }

//     await ParticipationType.updateOne(
//       {},
//       { $push: { accommodations: { name } } },
//       { upsert: true }
//     );

//     await syncPlans();

//     const updatedParticipationType = await ParticipationType.findOne();
//     res.status(201).json({ accommodations: updatedParticipationType.accommodations });
//   } catch (error) {
//     console.error('Error adding accommodation:', error.message);
//     res.status(500).json({ message: error.message });
//   }
// };

// // Delete an accommodation
// const deleteAccommodation = async (req, res) => {
//   const { id } = req.params;

//   if (!id) return res.status(400).json({ message: 'ID is required' });

//   try {
//     const result = await ParticipationType.updateOne(
//       {},
//       { $pull: { accommodations: { _id: id } } }
//     );

//     if (result.modifiedCount === 0) {
//       return res.status(404).json({ message: 'Accommodation not found' });
//     }

//     // Remove the accommodation from all plans
//     const plans = await Plan.find();
//     for (const plan of plans) {
//       plan.accommodationPrices = plan.accommodationPrices.filter(
//         (a) => a.accommodationType?.toString() !== id
//       );
//       plan.updatedAt = Date.now();
//       await plan.save();
//     }

//     await syncPlans();

//     res.status(200).json({ message: 'Accommodation deleted successfully' });
//   } catch (error) {
//     console.error('Error deleting accommodation:', error.message);
//     res.status(500).json({ message: error.message });
//   }
// };

// // Get all participation types
// const getParticipationTypes = async (req, res) => {
//   try {
//     const participationTypes = await ParticipationType.find();
//     res.status(200).json(participationTypes);
//   } catch (error) {
//     console.error('Error fetching participation types:', error.message);
//     res.status(500).json({ message: error.message });
//   }
// };

// module.exports = {
//   addParticipant,
//   deleteParticipant,
//   addAccommodation,
//   deleteAccommodation,
//   getParticipationTypes,
// };
// 
// 
// 
// 

// const mongoose = require('mongoose');

// const ParticipationSchema = new mongoose.Schema({
//   participants: [
//     { name: { type: String, required: true, unique: true } }
//   ],
//   accommodations: [
//     { name: { type: String, required: true, unique: true } }
//   ],
//   createdAt: { type: Date, default: Date.now }
// });

// module.exports = mongoose.model('ParticipationType', ParticipationSchema);

const Plan = require("../models/plan");
const ParticipationType = require("../models/participationType");

// Create a new plan
const createPlan = async (req, res) => {
  const { name, prices = [], accommodationPrices = [], startDate, endDate } = req.body;

  if (!name || !startDate || !endDate) {
    return res.status(400).json({ message: 'Name, startDate, and endDate are required' });
  }

  try {
    const participationTypes = await ParticipationType.findOne();

    const planPrices = prices.map((item) => {
      const participant = participationTypes.participants.find(
        (type) => type._id.toString() === item.participationType
      );
      return {
        participationType: participant?._id || null,
        name: participant?.name || null,
        price: item.price || null,
      };
    });

    const accommodationPriceArray = accommodationPrices.map((item) => {
      const accommodation = participationTypes.accommodations.find(
        (type) => type._id.toString() === item.accommodationType
      );
      return {
        accommodationType: accommodation?._id || null,
        name: accommodation?.name || null,
        price: item.price || null,
      };
    });

    const newPlan = await Plan.create({
      name,
      prices: planPrices,
      accommodationPrices: accommodationPriceArray,
      startDate,
      endDate,
    });

    res.status(201).json(newPlan);
  } catch (error) {
    console.error('Error creating plan:', error.message);
    res.status(500).json({ message: error.message });
  }
};

// Update a plan
const updatePlanPrices = async (req, res) => {
  const { planId, prices = [], accommodationPrices = [] } = req.body;

  try {
    const plan = await Plan.findById(planId);
    if (!plan) {
      return res.status(404).json({ message: 'Plan not found' });
    }

    const participationTypes = await ParticipationType.findOne();

    plan.prices = prices.map((item) => {
      const participant = participationTypes.participants.find(
        (type) => type._id.toString() === item.participationType
      );
      return {
        participationType: participant?._id || null,
        name: participant?.name || null,
        price: item.price || null,
      };
    });

    plan.accommodationPrices = accommodationPrices.map((item) => {
      const accommodation = participationTypes.accommodations.find(
        (type) => type._id.toString() === item.accommodationType
      );
      return {
        accommodationType: accommodation?._id || null,
        name: accommodation?.name || null,
        price: item.price || null,
      };
    });

    plan.updatedAt = Date.now();
    await plan.save();

    res.status(200).json(plan);
  } catch (error) {
    console.error('Error updating plan prices:', error.message);
    res.status(500).json({ message: error.message });
  }
};

// Get all plans
const getPlans = async (req, res) => {
  try {
    const plans = await Plan.find();
    res.status(200).json(plans);
  } catch (error) {
    console.error('Error fetching plans:', error.message);
    res.status(500).json({ message: error.message });
  }
};

// Delete a plan
const deletePlan = async (req, res) => {
  const { id } = req.params;

  if (!id) return res.status(400).json({ message: 'ID is required' });

  try {
    const plan = await Plan.findById(id);
    if (!plan) {
      return res.status(404).json({ message: 'Plan not found' });
    }

    await Plan.findByIdAndDelete(id);
    res.status(200).json({ message: 'Plan deleted successfully' });
  } catch (error) {
    console.error('Error deleting plan:', error.message);
    res.status(500).json({ message: error.message });
  }
};

// module.exports = { createPlan, updatePlanPrices, getPlans, deletePlan };
